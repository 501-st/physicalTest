{"ast":null,"code":"import { useState } from \"react\";\n/*export const SortByName = () => {\n    if (count.sortByName % 2 === 0 )\n        setState(state.sort(( a, b ) => a.first_name.localeCompare(b.first_name)))\n    else setState(state.sort(( a, b ) => b.first_name.localeCompare(a.first_name)))\n    setCount({...count, sortByName: count.sortByName + 1})\n}\n\nexport const SortByLastName = () => {\n    if (count.sortByLastName % 2 === 0 )\n        setState(state.sort(( a, b ) => a.last_name.localeCompare(b.last_name)))\n    else setState(state.sort(( a, b ) => b.last_name.localeCompare(a.last_name)))\n    setCount({...count, sortByLastName: count.sortByLastName + 1})\n}\n\nexport const SortByEmail = () => {\n    if (count.sortByEmail % 2 === 0 )\n        setState(state.sort(( a, b ) => a.email.localeCompare(b.email)))\n    else setState(state.sort(( a, b ) => b.email.localeCompare(a.email)))\n    setCount({...count, sortByEmail: count.sortByEmail + 1})\n}\n\nexport const SortByUsername = () => {\n    if (count.sortByUsername % 2 === 0 )\n        setState(state.sort(( a, b ) => a.username.localeCompare(b.username)))\n    else setState(state.sort(( a, b ) => b.username.localeCompare(a.username)))\n    setCount({...count, sortByUsername: count.sortByUsername + 1})\n}\n\nexport const SortByPayStatus = () => {\n    if (count.sortByPayStatus % 2 === 0 )\n        setState(state.sort(( a, b ) => a.pay_status - b.pay_status))\n    else setState(state.sort(( a, b ) => b.pay_status - a.pay_status))\n    setCount({...count, sortByPayStatus: count.sortByPayStatus + 1})\n}*/\n\nexport const SortById = (state, setState) => {\n  if (count.sortById % 2 === 0) setState(state.sort((a, b) => a.id - b.id));else setState(state.sort((a, b) => b.id - a.id));\n  setCount({ ...count,\n    sortById: count.sortById + 1\n  });\n};\n_c = SortById;\nconst [count, setCount] = useState({\n  sortById: 0,\n  sortByName: 0,\n  sortByLastName: 0,\n  sortByUsername: 0,\n  sortByEmail: 0,\n  sortByPayStatus: 0,\n  sortByLink: 0\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"SortById\");","map":{"version":3,"names":["useState","SortById","state","setState","count","sortById","sort","a","b","id","setCount","sortByName","sortByLastName","sortByUsername","sortByEmail","sortByPayStatus","sortByLink"],"sources":["/home/daniil/github/physical/src/helpers/sort.js"],"sourcesContent":["import {useState} from \"react\";\n\n/*export const SortByName = () => {\n    if (count.sortByName % 2 === 0 )\n        setState(state.sort(( a, b ) => a.first_name.localeCompare(b.first_name)))\n    else setState(state.sort(( a, b ) => b.first_name.localeCompare(a.first_name)))\n    setCount({...count, sortByName: count.sortByName + 1})\n}\n\nexport const SortByLastName = () => {\n    if (count.sortByLastName % 2 === 0 )\n        setState(state.sort(( a, b ) => a.last_name.localeCompare(b.last_name)))\n    else setState(state.sort(( a, b ) => b.last_name.localeCompare(a.last_name)))\n    setCount({...count, sortByLastName: count.sortByLastName + 1})\n}\n\nexport const SortByEmail = () => {\n    if (count.sortByEmail % 2 === 0 )\n        setState(state.sort(( a, b ) => a.email.localeCompare(b.email)))\n    else setState(state.sort(( a, b ) => b.email.localeCompare(a.email)))\n    setCount({...count, sortByEmail: count.sortByEmail + 1})\n}\n\nexport const SortByUsername = () => {\n    if (count.sortByUsername % 2 === 0 )\n        setState(state.sort(( a, b ) => a.username.localeCompare(b.username)))\n    else setState(state.sort(( a, b ) => b.username.localeCompare(a.username)))\n    setCount({...count, sortByUsername: count.sortByUsername + 1})\n}\n\nexport const SortByPayStatus = () => {\n    if (count.sortByPayStatus % 2 === 0 )\n        setState(state.sort(( a, b ) => a.pay_status - b.pay_status))\n    else setState(state.sort(( a, b ) => b.pay_status - a.pay_status))\n    setCount({...count, sortByPayStatus: count.sortByPayStatus + 1})\n}*/\n\nexport const SortById = (state, setState) => {\n    if (count.sortById % 2 === 0 )\n        setState(state.sort(( a, b ) => a.id - b.id))\n    else setState(state.sort(( a, b ) => b.id - a.id))\n    setCount({...count, sortById: count.sortById + 1})\n}\n\nconst [count, setCount] = useState({\n    sortById: 0,\n    sortByName: 0,\n    sortByLastName: 0,\n    sortByUsername: 0,\n    sortByEmail: 0,\n    sortByPayStatus: 0,\n    sortByLink: 0\n});"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,OAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;EACzC,IAAIC,KAAK,CAACC,QAAN,GAAiB,CAAjB,KAAuB,CAA3B,EACIF,QAAQ,CAACD,KAAK,CAACI,IAAN,CAAW,CAAEC,CAAF,EAAKC,CAAL,KAAYD,CAAC,CAACE,EAAF,GAAOD,CAAC,CAACC,EAAhC,CAAD,CAAR,CADJ,KAEKN,QAAQ,CAACD,KAAK,CAACI,IAAN,CAAW,CAAEC,CAAF,EAAKC,CAAL,KAAYA,CAAC,CAACC,EAAF,GAAOF,CAAC,CAACE,EAAhC,CAAD,CAAR;EACLC,QAAQ,CAAC,EAAC,GAAGN,KAAJ;IAAWC,QAAQ,EAAED,KAAK,CAACC,QAAN,GAAiB;EAAtC,CAAD,CAAR;AACH,CALM;KAAMJ,Q;AAOb,MAAM,CAACG,KAAD,EAAQM,QAAR,IAAoBV,QAAQ,CAAC;EAC/BK,QAAQ,EAAE,CADqB;EAE/BM,UAAU,EAAE,CAFmB;EAG/BC,cAAc,EAAE,CAHe;EAI/BC,cAAc,EAAE,CAJe;EAK/BC,WAAW,EAAE,CALkB;EAM/BC,eAAe,EAAE,CANc;EAO/BC,UAAU,EAAE;AAPmB,CAAD,CAAlC"},"metadata":{},"sourceType":"module"}